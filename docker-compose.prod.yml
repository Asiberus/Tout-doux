services:
  frontend:
    container_name: ${FRONTEND_NAME}
    restart: always
    build:
      context: .
      dockerfile: .conf/production/frontend/Dockerfile
      args:
        ARG_VERSION: ${VERSION}
        ARG_API_URL: ${SERVER_PROTOCOL}://${API_HOST}/
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    environment:
      SERVER_HOST: ${SERVER_HOST}
      SERVER_PORT: ${SERVER_PORT}
      API_HOST: ${API_HOST}
      BACKEND_PROXY: ${BACKEND_NAME}:${BACKEND_PORT}
    volumes:
      - td_static_files:/vol/static
  backend:
    container_name: ${BACKEND_NAME}
    restart: always
    build:
      context: .
      dockerfile: ./.conf/production/backend/Dockerfile
    environment:
      SERVER_URL: ${SERVER_PROTOCOL}://${SERVER_HOST}/
      BACKEND_PORT: ${BACKEND_PORT}
      SECRET_KEY: ${BACKEND_SECRET_KEY}
      DEBUG: ${BACKEND_DEBUG}
      ALLOWED_HOSTS: ${BACKEND_ALLOWED_HOSTS}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      BACKEND_USE_EMAIL_FILE_SYSTEM: ${BACKEND_USE_EMAIL_FILE_SYSTEM}
      MAILJET_API_KEY: ${MAILJET_API_KEY}
      MAILJET_API_SECRET: ${MAILJET_API_SECRET}
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    volumes:
      - td_static_files:/vol/web
    depends_on:
      - db
  db:
    image: postgres:${DB_POSTGRES_VERSION}
    container_name: ${DB_HOST}
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      PGPORT: ${DB_PORT}
    ports:
      - ${DB_PORT}:${DB_PORT}
    volumes:
      - td_db:/var/lib/postgresql/data
volumes:
  td_db:
    name: td_db
  td_static_files:
    name: td_static_files
